@* Контрол, представляющий пароль. *@

@using ClientApp.Models
@using System.Text.RegularExpressions
@using ClientApp.Store

@inject InstallStore installStore

<MudContainer Class="d-flex pa-0 ma-0" Style="height:56px;">
  <LabelControl UIVariable="@(this.UIVariable)" />
  <MudTextField T="string" @ref="this.passwordMudTextField" @bind-Value="this.UIValue" Class="d-inline-flex" Margin="Margin.Dense"
                InputType="@(this.passwordInput)"
                Adornment="Adornment.End" AdornmentIcon="@(this.passwordInputIcon)" OnAdornmentClick="this.ChangePasswordVisible"
                HelperText="@(this.UIVariable.Description)"
                Required="@(this.UIVariable.State.IsRequired)" RequiredError="@(this.UIVariable.State.RequiredError)"
                Style="width:300px;margin-top: 3px"/>
</MudContainer>

@code {
#pragma warning disable CS1591

  [Parameter]
  public UIVariable UIVariable { get; set; }

  string[] errors = { };
  MudTextField<string> passwordMudTextField;

  bool isShow;
  InputType passwordInput = InputType.Password;
  string passwordInputIcon = Icons.Material.Filled.VisibilityOff;

  void ChangePasswordVisible()
  {
    if (this.isShow)
    {
      this.isShow = false;
      this.passwordInputIcon = Icons.Material.Filled.VisibilityOff;
      this.passwordInput = InputType.Password;
    }
    else {
      this.isShow = true;
      this.passwordInputIcon = Icons.Material.Filled.Visibility;
      this.passwordInput = InputType.Text;
    }
  }

  private string UIValue
  {
    get => this.UIVariable.Value?.ToString();
    set => this.UIVariable.Value = value;
  }

  private string repeatPasswordValue;

  protected override void OnInitialized()
  {
    this.repeatPasswordValue = this.UIValue;
    base.OnInitialized();
  }

}
